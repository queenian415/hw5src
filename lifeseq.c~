/*****************************************************************************
 * life.c
 * The original sequential implementation resides here.
 * Do not modify this file, but you are encouraged to borrow from it
 ****************************************************************************/
#include "life.h"
#include "util.h"
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>


/**
 * Swapping the two boards only involves swapping pointers, not
 * copying values.
 */
#define SWAP_BOARDS( b1, b2 )  do { \
  char* temp = b1; \
  b1 = b2; \
  b2 = temp; \
} while(0)

#define BOARD( __board, __i, __j )  (__board[(__i) + LDA*(__j)])

#define NUM_THREADS 16

int nrows, ncols, LDA;

struct args_data {
  int rows_from;
  int rows_to;
  int cols_from;
  int cols_to;
  char* outboard;
  char* inboard;
};


void*
parallel_run(void* args) {

  struct args_data* data = (struct args_data*) args;
  int rows_from = data->rows_from;
  int rows_to = data->rows_to;
  int cols_from = data->cols_from;
  int cols_to = data->cols_to;
  char* outboard = data->outboard;
  char* inboard = data->inboard;
  int i, j;

   for (i = rows_from; i < rows_to; i++)
        {
            for (j = cols_from; j < cols_to; j++)
            {
                const int inorth = mod (i-1, nrows);
                const int isouth = mod (i+1, nrows);
                const int jwest = mod (j-1, ncols);
                const int jeast = mod (j+1, ncols);

                const char neighbor_count = 
                    BOARD (inboard, inorth, jwest) + 
                    BOARD (inboard, inorth, j) + 
                    BOARD (inboard, inorth, jeast) + 
                    BOARD (inboard, i, jwest) +
                    BOARD (inboard, i, jeast) + 
                    BOARD (inboard, isouth, jwest) +
                    BOARD (inboard, isouth, j) + 
                    BOARD (inboard, isouth, jeast);

                BOARD(outboard, i, j) = alivep (neighbor_count, BOARD (inboard, i, j));

            }
	}
}

    char*
sequential_game_of_life (char* outboard, 
        char* inboard,
        const int nrows_,
        const int ncols_,
        const int gens_max)
{
    /* HINT: in the parallel decomposition, LDA may not be equal to
       nrows! */
  nrows = nrows_;
  ncols = ncols_;
  LDA = nrows;
    int curgen, i, rows_from, rows_to, cols_from, cols_to;
    pthread_t *thread = (pthread_t*)malloc(NUM_THREADS * sizeof(pthread_t));

    for (curgen = 0; curgen < gens_max; curgen++)
    {
      for (i = 1; i < NUM_THREADS; i++) {
	if (i == 1) {
	  rows_from = nrows / 4;
	  rows_to = nrows / 2;
	  cols_from = 0;
	  cols_to = ncols / 4;
	} else if (i == 2) {
	  rows_from = nrows / 2;
	  rows_to = 3 * nrows / 4;
	  cols_from = 0;
	  cols_to = ncols / 4;
	} else if (i == 3) {
	  rows_from = 3 * nrows / 2;
	  rows_to = nrows;
	  cols_from = 0;
	  cols_to = ncols / 4;
	} else if (i == 4) {
	  rows_from = 0;
	  rows_to = nrows / 4;
	  cols_from = ncols / 4;
	  cols_to = ncols / 2;
	} else if (i == 5) {
	  rows_from = nrows / 4;
	  rows_to = nrows / 2;
	  cols_from = ncols / 4;
	  cols_to = ncols / 2;
	} else if (i == 6) {
	  rows_from = nrows / 2;
	  rows_to = 3 * nrows / 4;
	  cols_from = ncols / 4;
	  cols_to = ncols / 2;
	} else if (i == 7) {
	  rows_from = 3 * nrows / 4;
	  rows_to = nrows;
	  cols_from = ncols / 4;
	  cols_to = ncols / 2;
	} else if (i == 8) {
	  rows_from = 0;
	  rows_to = nrows / 4;
	  cols_from = ncols / 2;
	  cols_to = 3 * ncols / 4;
	}  else if (i == 9) {
	  rows_from = nrows / 4;
	  rows_to = nrows / 2;
	  cols_from = ncols / 2;
	  cols_to = 3 * ncols / 4;
	}  else if (i == 10) {
	  rows_from = nrows / 2;
	  rows_to = 3 * nrows / 4;
	  cols_from = ncols / 2;
	  cols_to = 3 * ncols / 4;
	}  else if (i == 11) {
	  rows_from = 3 * nrows / 4;
	  rows_to = nrows;
	  cols_from = ncols / 2;
	  cols_to = 3 * ncols / 4;
	}  else if (i == 12) {
	  rows_from = 0;
	  rows_to = nrows / 4;
	  cols_from = 3 * ncols / 4;
	  cols_to = ncols;
	} else if (i == 13) {
	  rows_from = nrows / 4;
	  rows_to = nrows / 2;
	  cols_from = 3 * ncols / 4;
	  cols_to = ncols;
	} else if (i == 14) {
	  rows_from = nrows / 2;
	  rows_to = 3 * nrows / 4;
	  cols_from = 3 * ncols / 4;
	  cols_to = ncols;
	} else if (i == 15) {
	  rows_from = 3 * nrows / 4;
	  rows_to = nrows;
	  cols_from = 3 * ncols / 4;
	  cols_to = ncols;
	} else {
	              exit(-1);
	}

	struct args_data* data = (struct args_data*) malloc(sizeof(struct args_data));
  data->rows_from = rows_from;
  data->cols_from = cols_from;
  data->rows_to = rows_to;
  data->cols_to = cols_to;
  data->outboard = outboard;
  data->inboard = inboard;
  
        if (pthread_create (&thread[i], NULL, parallel_run, (void*)data) != 0 ) {
            perror("Can't create thread");
            exit(-1);
        }
      }
      
       /* master thread is thread 0 so: */
      	struct args_data* data1 = (struct args_data*) malloc(sizeof(struct args_data));
  data1->rows_from = 0;
  data1->cols_from = 0;
  data1->rows_to = nrows / 4;
  data1->cols_to = ncols / 4;
  data1->outboard = outboard;
  data1->inboard = inboard;
  parallel_run((void*) data1);
    
    for (i = 1; i < NUM_THREADS; i++) pthread_join (thread[i], NULL);

       
        SWAP_BOARDS( outboard, inboard );

    }
    /* 
     * We return the output board, so that we know which one contains
     * the final result (because we've been swapping boards around).
     * Just be careful when you free() the two boards, so that you don't
     * free the same one twice!!! 
     */
    return inboard;
}


